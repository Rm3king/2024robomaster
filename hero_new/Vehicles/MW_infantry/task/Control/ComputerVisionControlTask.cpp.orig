#include "/Control/ComputerVisionControlTask.h"
#include "/Robot/Robot.h"
#include "usart.h"

MINIPC_RX_data_t mini_pc_data;

ComputerVisionControlTask::ComputerVisionControlTask(
  Robot &robot0,
  CanDevice &_can_device,
  timeus_t interval_tick_us0
) : Task_Base(robot0)
{
  this->interval_tick_us = interval_tick_us0;
  can_rx_data.std_id = CAN_MINIPC_RX_ID;
  _can_device.addRxLink(&can_rx_data);
  imu_sync_data_task = new IMUDataSyncTask(robot0);
  robot0.scheduler.registerTask(imu_sync_data_task);
}


void ComputerVisionControlTask::init()
{
inited = true;
}

void ComputerVisionControlTask::update(timeus_t dT_us)
{
  minipc_ctrl_data.pos.x = (int16_t)((can_rx_data.data[0] << 8) | (can_rx_data.data[1])) / 32760.0f;
  minipc_ctrl_data.pos.y = (int16_t)((can_rx_data.data[2] << 8) | (can_rx_data.data[3])) / 32760.0f;
  minipc_ctrl_data.pos.z = (int16_t)((can_rx_data.data[4] << 8) | (can_rx_data.data[5])) / 32760.0f;
  minipc_ctrl_data.shoot_freq = can_rx_data.data[7] / 255.0f * 9.0f;
}

void ComputerVisionControlTask::uninit(void)
{

}

// 加速度计、陀螺仪、角速度计数据同步任务
IMUDataSyncTask::IMUDataSyncTask(
  Robot &robot0,
  timeus_t interval_tick_us0
) : Task_Base(robot0)
{
  this->interval_tick_us = interval_tick_us0;
}


void IMUDataSyncTask::init()
{

}
void IMUDataSyncTask::update(timeus_t dT_us)
{
  uint8_t imu_id = robot.getBMI088BackendId();

  // 24g
  int16_t * accel = ((InertialSensor_BMI088*)robot.inertial_sensors.findBackendById(imu_id))->getAccelRawPointer();
  // 2000dps
  int16_t * gyro = ((InertialSensor_BMI088*)robot.inertial_sensors.findBackendById(imu_id))->getGyroRawPointer();

  Quaternion q = robot.attitude_solution_task_p->getIMUQuat();

  int16_t quaternion[4];
  quaternion[0] = q.w * 32760.0f;
  quaternion[1] = q.x * 32760.0f;
  quaternion[2] = q.y * 32760.0f;
  quaternion[3] = q.z * 32760.0f;

  data_buf[0] = 0xAA; // 帧头
  data_buf[1] = 0xFF; // 目标地址
  data_buf[2] = 0x01; // 功能码
  data_buf[3] = 20; // 数据长度

  data_buf[4]  = accel[0];
  data_buf[5]  = accel[0] >> 8;
  data_buf[6]  = accel[1];
  data_buf[7]  = accel[1] >> 8;
  data_buf[8]  = accel[2];
  data_buf[9]  = accel[2] >> 8;

  data_buf[10] = gyro[0];
  data_buf[11] = gyro[0] >> 8;
  data_buf[12] = gyro[1];
  data_buf[13] = gyro[1] >> 8;
  data_buf[14] = gyro[2];
  data_buf[15] = gyro[2] >> 8;

  data_buf[16] = quaternion[0];
  data_buf[17] = quaternion[0] >> 8;
  data_buf[18] = quaternion[1];
  data_buf[19] = quaternion[1] >> 8;
  data_buf[20] = quaternion[2];
  data_buf[21] = quaternion[2] >> 8;
  data_buf[22] = quaternion[3];
  data_buf[23] = quaternion[3] >> 8;

  data_buf[24] = 0;
  data_buf[25] = 0;

  for(int i = 0; i < (data_buf[3] + 4); i++)
  {
    data_buf[24] += data_buf[i];		//从帧头开始，对每一字节进行求和，直到DATA区结束
    data_buf[25] += data_buf[24];		//每一字节的求和操作，进行一次sumcheck的累加
  }

  HAL_UART_Transmit_DMA(&huart1, data_buf, data_buf[3] + 6);
////  j++;
////  if(j > 100)
////    j = 0;
////  j = 10;
//  HAL_UART_Transmit_DMA(&huart1, j, 5);
}

void IMUDataSyncTask::uninit(void)
{

}