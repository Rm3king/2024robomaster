/***************************************************************************
**   					             大连理工大学 凌BUG战队
**   					               凌以青云，翥以极心!
**-------------------------------------------------------------------------
** 项    目：   robo_template
** 文 件 名：   AmmoRM_ControlTask.cpp
** 文件说明：   云台控制任务
**-------------------------------------------------------------------------
**						*修订*
**	*版本*							*修改内容*							*修改人*      			 *日期*
**	 1.0							   初始版本						     林子涵     	     2022-07-26
***************************************************************************/
#include "/Ammo/AmmoControlTask.h"
#include "/Robot/Robot.h"
#include "UARTDriver.h"

#define REGIONS_NUM 9.0f

/***********************************************************************
** 函 数 名： AmmoRM_ControlTask构造函数
** 函数说明： 指定robot引用，CAN设备引用，指定yaw和pitch轴电机CAN总线id
**            和CAN总线数据包发送起始下标，指定任务更新时间间隔，同时
**            给yaw和pitch轴电机注册Motor_RM_PIDControlTask任务
**---------------------------------------------------------------------
** 输入参数： robot引用、CAN设备引用、yaw和pitch轴电机CAN总线id、
**            CAN总线数据包发送起始下标、任务更新时间间隔
** 返回参数： 无
***********************************************************************/
AmmoRM_ControlTask::AmmoRM_ControlTask(
  Robot &robot0,
    Motor_RM_Params_t *booster_r, PID_Params_t *booster_r_ang, PID_Params_t *booster_r_ang_vel,
        Motor_RM_Params_t *booster_l, PID_Params_t *booster_l_ang, PID_Params_t *booster_l_ang_vel,
            Motor_RM_Params_t *trigger, PID_Params_t *trigger, PID_Params_t *trigger,
  Motor_RM_Params_t booster_r,
  Motor_RM_Params_t booster_l,
  Motor_RM_Params_t trigger,
  timeus_t interval_tick_us0
) : Task_Base(robot0)
{
  this->interval_tick_us = interval_tick_us0;

  if(booster_r.canx == 1)
  {
    this->motor_booster_r_pid_task = new Motor_RM_PIDControlTask(robot0,
        robot0.can1_device,
        booster_r.can_tx_id,
        booster_r.can_rx_id,
        booster_r.can_tx_data_start_pos,
        RoboMaster_3508,
        0);
  }
  else if(booster_r.canx == 2)
  {
    this->motor_booster_r_pid_task = new Motor_RM_PIDControlTask(robot0,
        robot0.can2_device,
        booster_r.can_tx_id,
        booster_r.can_rx_id,
        booster_r.can_tx_data_start_pos,
        RoboMaster_3508,
        0);
  }

  if(booster_l.canx == 1)
  {
    this->motor_booster_l_pid_task = new Motor_RM_PIDControlTask(robot0,
        robot0.can1_device,
        booster_l.can_tx_id,
        booster_l.can_rx_id,
        booster_l.can_tx_data_start_pos,
        RoboMaster_3508,
        0);
  }
  else if(booster_l.canx == 2)
  {
    this->motor_booster_l_pid_task = new Motor_RM_PIDControlTask(robot0,
        robot0.can2_device,
        booster_l.can_tx_id,
        booster_l.can_rx_id,
        booster_l.can_tx_data_start_pos,
        RoboMaster_3508,
        0);
  }

  if(trigger.canx == 1)
  {
    this->motor_trigger_pid_task = new Motor_RM_PIDControlTask(robot0,
        robot0.can1_device,
        trigger.can_tx_id,
        trigger.can_rx_id,
        trigger.can_tx_data_start_pos,
        RoboMaster_2006,
        0);
  }
  else if(trigger.canx == 2)
  {
    this->motor_trigger_pid_task = new Motor_RM_PIDControlTask(robot0,
        robot0.can2_device,
        trigger.can_tx_id,
        trigger.can_rx_id,
        trigger.can_tx_data_start_pos,
        RoboMaster_2006,
        0);
  }
  
  this->motor_booster_r_pid_task->motor_backend_p->setParams(booster_r);
  this->motor_booster_l_pid_task->motor_backend_p->setParams(booster_l);
  this->motor_trigger_pid_task->motor_backend_p->setParams(trigger);

  this->motor_booster_r_pid_task->setPIDControllerParams

}


/***********************************************************************
** 函 数 名： AmmoRM_ControlTask::init()
** 函数说明： 注册云台各个电机Motor_RM_PIDControlTask任务
**---------------------------------------------------------------------
** 输入参数： 无
** 返回参数： 无
***********************************************************************/
void AmmoRM_ControlTask::init(void)
{
  robot.scheduler.registerTask(motor_booster_l_pid_task);
  robot.scheduler.registerTask(motor_booster_r_pid_task);
  robot.scheduler.registerTask(motor_trigger_pid_task);
  exp_spd = 20;
  shoot_freq = 0;
}

/***********************************************************************
** 函 数 名： AmmoRM_ControlTask::update(timeus_t dT_us)
** 函数说明： 通过云台电机编码器和IMU计算云台Yaw轴机构、车底盘
**            等部分的空间姿态，更新云台各个电机控制任务，并发送
**---------------------------------------------------------------------
** 输入参数： 无
** 返回参数： 无
***********************************************************************/
void AmmoRM_ControlTask::update(timeus_t dT_us)
{
  float dT_s = dT_us / 1e6f;
  // Uart_SendString(shit);
  // 左边摩擦轮
  motor_booster_l_pid_task->angular_velocity_control_task_p->setPIDControllerFeedback(
    motor_booster_l_pid_task->motor_backend_p->getCommonMeasurement().linear.velocity
  );

  motor_booster_l_pid_task->angular_velocity_control_task_p->setPIDControllerExpect(
    exp_spd
  );

  // 右边摩擦轮
  motor_booster_r_pid_task->angular_velocity_control_task_p->setPIDControllerFeedback(
    motor_booster_r_pid_task->motor_backend_p->getCommonMeasurement().linear.velocity
  );

  motor_booster_r_pid_task->angular_velocity_control_task_p->setPIDControllerExpect(
    exp_spd
  );

  // 拨弹盘
  motor_trigger_pid_task->angular_velocity_control_task_p->setPIDControllerFeedback(
    motor_trigger_pid_task->motor_backend_p->getCommonMeasurement().output.angular_velocity
  );

  // Debug_Printf("%12.4f%12.4f\r\n", motor_yaw_pid_task->motor_backend_p->getCommonMeasurement().rotator.angular_velocity_imu*1000, motor_yaw_pid_task->angle_control_task_p->getOutput()*1000);

  // 发送
  if(booster_mode == BOOSTER_OFF)
  {
    motor_booster_l_pid_task->angular_velocity_control_task_p->setPIDControllerExpect(
      0
    );
    motor_booster_r_pid_task->angular_velocity_control_task_p->setPIDControllerExpect(
      0
    );
    if(shoot_freq > -0.1)
    {
      motor_trigger_pid_task->angular_velocity_control_task_p->setPIDControllerExpect(
        2 * PI * shoot_freq / REGIONS_NUM
      );
    }
  }
  else if(booster_mode == BOOSTER_ON)
  {
    if(shoot_freq > -0.1)
    {
      motor_trigger_pid_task->angular_velocity_control_task_p->setPIDControllerExpect(
        2 * PI * shoot_freq / REGIONS_NUM
      );
    }
  }
  else if(booster_mode == TRIGGER_AUTO)
  {
//    shoot_freq = robot.cv_control_task_p->getMiniPCControlData().shoot_freq;
//    if(shoot_freq > 0)
//    {
//      motor_trigger_pid_task->angular_velocity_control_task_p->setPIDControllerExpect(
//        2 * PI * shoot_freq / REGIONS_NUM
//      );
//    }
  }
  motor_booster_l_pid_task->motor_backend_p->setMotorInput(
    motor_booster_l_pid_task->angular_velocity_control_task_p->getOutput()
  );
  motor_booster_r_pid_task->motor_backend_p->setMotorInput(
    motor_booster_r_pid_task->angular_velocity_control_task_p->getOutput()
  );
  motor_trigger_pid_task->motor_backend_p->setMotorInput(
    motor_trigger_pid_task->angular_velocity_control_task_p->getOutput()
  );
}

/***********************************************************************
** 函 数 名： AmmoRM_ControlTask::uninit()
** 函数说明： 任务反初始化
**---------------------------------------------------------------------
** 输入参数： 无
** 返回参数： 无
***********************************************************************/
void AmmoRM_ControlTask::uninit(void) {}
